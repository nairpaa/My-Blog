[{"content":"Pendahuluan Selain memberikan kenyamanan atau manfaat dari penggunaan aplikasi, pengembang juga harus memastikan bahwa aplikasi yang dibuatnya itu aman. Hal ini dilakukan untuk meningkatkan kepercayaan pengguna dan menghindari kerugian bisnis.\nDalam proses pengembangan aplikasi, biasanya pengembang menggunakan kerangka kerja yang disebut SDLC (Software Development Life Cycle) untuk memastikan pengembangan sesuai dengan kebutuhan bisnis.\nNamun, SDLC hanya berfokus pada proses pengembangan tanpa memperhatikan aspek keamanan. Karena keamanan adalah aspek penting dalam pengembangan aplikasi, muncullah istilah Secure-SDLC (SSDLC), di mana tim keamanan membantu pengembang untuk menanamkan praktik keamanan di setiap tahapan SDLC.\nDari informasi ini, dapat diketahui bahwa pemahaman tentang SSDLC ini sangat penting, baik untuk tim keamanan internal (Application Security Engineer / Security Engineer) maupun eksternal (Cyber Security Consultant).\nSebelum membahas SSDLC, kita akan membahas sedikit tentang SDLC terlebih dahulu.\nApa itu SDLC? SDLC (Software Development Life Cycle) adalah kerangka kerja yang digunakan untuk merancang, mengembangkan, dan memelihara aplikasi. Tujuannya adalah untuk memastikan bahwa aplikasi yang dikembangkan memenuhi kebutuhan bisnis/pengguna dan dikembangkan secara efisien.\nBanyak metode SDLC yang umum digunakan, seperti:\nWaterfall, Agile, dan lain-lain. Tetapi secara keseluruhan setiap metode memiliki tahapan utama berikut:\nNo. Tahap Tujuan Utama 1 Perencanaan (Planning) Menentukan ruang lingkup, resource, dan timeline 2 Analisis Kebutuhan (Requirement Analysis) Menggali kebutuhan aplikasi dari sisi bisnis dan pengguna 3 Desain Sistem (System Design) Merancang arsitektur teknis berdasarkan kebutuhan yang telah disepakati 4 Implementasi (Implementation) Membuat aplikasi (coding) oleh tim pengembang 5 Pengujian (Testing) Memastikan sistem bekerja sesuai harapan melalui berbagai skenario uji 6 Penerapan \u0026amp; Pemeliharaan (Deployment and Maintenance) Merilis sistem ke produksi dan melakukan pemeliharaan berkala 1. Perencanaan Sebagai ilustrasi untuk lebih mengetahui SDLC, bayangkan sebuah perusahaan software house mendapatkan proyek untuk membuat aplikasi absensi.\nKliennya adalah perusahaan yang ingin karyawannya bisa absen secara online melalui aplikasi mobile. Aplikasi mobile ini memiliki fitur check-in, check-out, dan rekap laporan bulanan.\nProyek ini pun dimulai mengikuti tahapan SDLC.\nPada tahap Perencanaan, proyek dimulai dengan melakukan kick-off meeting antara tim internal dan klien.\nDi sini, tim internal dan klien akan berdiskusi tentang ruang lingkup dan ekspektasi dari proyek yang akan berjalan.\nBerikut adalah contoh pertanyaan umum yang ditanyakan kepada klien:\n\u0026ldquo;Apa ruang lingkup proyek?\u0026rdquo; \u0026ldquo;Apa ekspektasi dari klien?\u0026rdquo; \u0026ldquo;Apakah ada deadline dan batasan anggaran?\u0026rdquo; \u0026ldquo;Apakah ada sistem lain yang akan terintegrasi?\u0026rdquo; Setelah itu, tim internal (PM, dev, QA, dan desain) berdiskusi dan menyusun:\nTimeline proyek Estimasi biaya Struktur tim Identifikasi risiko awal Dokumen dari hasil tahap ini bisa berupa:\nProject Charter, penjelasan resmi proyek yang menjelaskan apa tujuan proyek, siapa yang terlibat, dan apa batasannya. High-Level Scope, menjelaskan apa yang akan dan tidak dikerjakan dalam proyek. Risk Register (Awal), daftar risiko potensial yang sudah teridentifikasi sejak awal proyek. Rencana Komunikasi dengan Stakeholder, menentukan siapa yang harus dihubungi, kapan, untuk urusan apa, dan lewat media apa. 2. Analisis Kebutuhan Setelah tahap perencanaan selesai dan ruang lingkup umum disepakati, proyek berlanjut ke tahap Analisis Kebutuhan.\nDi tahap ini, fokus utamanya adalah menggali detail kebutuhan secara fungsional maupun non-fungsional dari sisi pengguna.\nTim business analyst akan berdiskusi lebih dalam dengan klien untuk menjawab pertanyaan, seperti:\n\u0026ldquo;Bagaimana jam kerja dan aturan absensi perusahaan ini?\u0026rdquo; \u0026ldquo;Apakah perusahaan memiliki sistem shift?\u0026rdquo; \u0026ldquo;Siapa saja pengguna sistem? Apakah ada perbedaan role (HR, karyawan, manajer)?\u0026rdquo; \u0026ldquo;Bagaimana format laporan rekap yang diinginkan?\u0026rdquo; Semua jawaban ini akan dirangkum menjadi dokumen formal, yang bisa berbeda tergantung budaya kerja tim:\nProduct Requirements Document (PRD), berisi gambaran kebutuhan dari sudut pandang pengguna dan bisnis. Functional Requirements Document (FRD), berisi uraian teknis fungsi sistem secara rinci (input, output, validasi, aturan logika). Request for Comment (RFC), berisi proposal fitur, user journey, arsitektur, dan hal-hal yang masih perlu didiskusikan. Dokumen ini akan menjadi dasar untuk proses desain di tahap berikutnya.\n3. Desain Sistem Pada tahap Desain Sistem, fokus utama adalah menerjemahkan dokumen kebutuhan (PRD/FRD/RFC) menjadi arsitektur teknis yang dapat diimplementasikan oleh tim pengembang.\nBerikut adalah beberapa contoh kontribusi dari beberapa peran:\nDesainer UI/UX mulai membuat mockup dan user flow untuk tampilan aplikasi mobile.\nMisalnya: halaman login, tampilan check-in, riwayat absensi, dan halaman laporan.\nSystem Architect menyusun arsitektur aplikasi, seperti:\nBagaimana frontend berkomunikasi dengan backend Bagaimana API dibangun Penggunaan middleware atau autentikasi Database engineer merancang struktur basis data, misalnya:\nTabel user, attendance, shift, dan log, Relasi antar tabel dan indeks yang dibutuhkan untuk efisiensi. Semua hasil desain ini disusun ke dalam dokumen spesifikasi teknis, yang biasanya mencakup:\nSystem Architecture Diagram Database Schema / ERD API Specification (endpoint, input/output, status code) UI Wireframe atau Mockup Dokumen ini akan menjadi pedoman utama bagi tim pengembang di tahap implementasi berikutnya.\n4. Implementasi Pada tahap ini, tim pengembang mulai menulis kode program sesuai spesifikasi teknis yang telah disusun sebelumnya.\nBerikut adalah contoh aktivitas yang dilakukan:\nFrontend Developer membuat tampilan aplikasi mobile sesuai dengan mockup yang telah dibuat.\nBackend Developer membuat sistem aplikasi di sisi server, seperti: autentikasi, API, dan penyimpanan data absensi.\n5. Pengujian Setelah aplikasi berhasil dibuat, proyek memasuki tahap Pengujian.\nDi tahap ini, tim Quality Assurance (QA) bertugas untuk memastikan bahwa semua fitur berjalan sesuai dengan kebutuhan yang telah disepakati.\nQA biasanya melakukan pengujian berdasarkan skenario, contohnya:\nFungsional:\n\u0026ldquo;Apakah pengguna hanya bisa check-in dalam jam kerja yang valid?\u0026rdquo;\n\u0026ldquo;Apakah tombol check-out aktif setelah check-in berhasil?\u0026rdquo;\nLogika absensi:\n\u0026ldquo;Apakah waktu absen tercatat dengan benar di laporan?\u0026rdquo;\n\u0026ldquo;Apakah data pengguna tetap muncul saat login di perangkat lain?\u0026rdquo;\nKondisi ekstrem:\n\u0026ldquo;Apa yang terjadi jika koneksi internet lambat atau putus?\u0026rdquo;\nBerikut adalah contoh bug yang ditemukan oleh QA:\nTombol check-out muncul sebelum waktunya Laporan tidak terurut secara kronologis Crash saat pengguna absen dua kali berturut-turut Semua temuan ini dicatat dan dikembalikan ke tim pengembang untuk diperbaiki, lalu diuji kembali oleh QA hingga aplikasi dianggap stabil dan siap untuk dirilis.\n6. Penerapan dan Pemeliharaan Pada tahap ini, aplikasi dipindahkan dari lingkungan pengujian ke lingkungan produksi, dan mulai digunakan oleh karyawan klien.\nTim infrastruktur atau DevOps biasanya akan:\nMenyiapkan server produksi, Melakukan konfigurasi domain, sertifikat SSL, dan basis data, Melakukan build dan release aplikasi ke store. Setelah rilis, aplikasi tetap memerlukan pemeliharaan, seperti:\nPembaruan fitur, Perbaikan bug, Pemantauan sistem, Dan lain-lain. Proses ini sering dikaitkan dengan model CI/CD, yang memungkinkan pembaruan dilakukan secara lebih cepat dan otomatis.\nItu lah gambaran umum tentang proses SDLC yang akan menjadi bekal pembahasan materi SSDLC.\nApa itu Secure-SDLC? Setelah mempelajari konsep SDLC, kita tahu bahwa konsep tersebut hanya fokus pada pengembangan dan pengujian fungsi aplikasi, tanpa secara eksplisit memperhatikan aspek keamanan.\nPadahal, seperti yang kita tahu bahwa keamanan adalah aspek penting yang harus dimiliki oleh aplikasi.\nInilah alasan munculnya konsep Secure Software Development Life Cycle (SSDLC).\nSecure Software Development Life Cycle (SSDLC) adalah konsep di mana tim keamanan membantu tim pengembang untuk menanamkan aspek keamaman pada setiap tahap SDLC.\nDengan adanya SSDLC, keamaman bukan lagi menjadi sesuatu yang dipikirkan belakangan, melainkan menjadi bagian terencana sejak awal proses pengembangan.\nPenerapan SSDLC tidak hanya meningkatkan keamanan aplikasi, tetapi membantu perusahaan untuk memenuhi standar keamanan seperti ISO 27001:2022 dan juga regulasi keamanan seperti SEOJK 27 MRTI.\nBerikut adalah tahapan umum pada SSDLC:\nNo. Tahap Aktivitas Tim Lain Aktivitas Tim Keamanan 1 Perencanaan (Planning) Kick-off meeting dengan klien; Menentukan ruang lingkup, timeline, anggaran, dan resource (Belum aktif â€“ tim keamanan mulai terlibat di tahap berikutnya) 2 Analisis Kebutuhan (Requirement Analysis) Mengumpulkan kebutuhan fungsional/non-fungsional; Menyusun PRD, FRD, atau RFC Mengidentifikasi kebutuhan keamanan; Menyisipkan kontrol seperti autentikasi, logging, dan proteksi data ke dalam dokumen PRD/FRD/RFC 3 Desain Sistem (System Design) Mendesain arsitektur sistem, API, dan database; Membuat ERD dan diagram alur; Merancang UI mockup Melakukan threat modeling terhadap alur proses bisnis; Security design review terhadap arsitektur dan kontrol akses 4 Implementasi (Implementation) Menulis kode frontend/backend; Unit testing; Integrasi modul dan push ke repositori Memberikan panduan secure coding; Menjalankan SAST, secret scanning dan SCA 5 Pengujian (Testing) Pengujian fungsional dan integrasi oleh tim QA; Simulasi error dan edge case; User Acceptance Test (UAT) Menjalankan DAST; Penetration testing 6 Penerapan \u0026amp; Pemeliharaan (Deployment and Maintenance) Deploy ke produksi; Monitoring performa; Patch fitur dan perbaikan bug Monitoring kerentanan dependency \u0026amp; komponen pihak ketiga; Implementasi WAF; Bug bounty \u0026amp; VDP; Patch \u0026amp; incident response; Security regression testing 1. Perencanaan Pada tahap ini, tim keamanan belum melakukan aktivitas apa pun. Tim hanya menunggu rencana poyek masuk dan menyiapkan keterlibatan pada tahap berikutnya.\n2. Analisis Kebutuhan Pada tahap ini, tim keamanan mulai terlibat untuk memastikan bahwa aspek keamanan sudah dipikirkan sejak awal.\nSaat tim business analyst merumuskan kebutuhan pengguna, tim keamaman membantu dengan mengajukan pertanyaan, seperti:\n\u0026ldquo;Apakah data absensi tergolong sebagai data pribadi?\u0026rdquo; \u0026ldquo;Siapa yang boleh mengakses data laporan?\u0026rdquo; \u0026ldquo;Aksi seperti absensi dan login perlu dicatat dalam audit log, bagaimana kebijakan perusahaan terkait pelacakan aktivitas ini?\u0026rdquo; Dari diskusi ini, tim keamanan menyusun kebutuhan keamanan dasar, misalnya:\nWajib login untuk akses fitur utama Data absensi harus disimpan terenkripsi Aksi absensi harus dicatat di audit log Semua poin ini dimasukkan ke dalam dokumen PRD/FRD/RFC.\n3. Desain Sistem Pada tahap ini, tim internal mulai menyusun desain arsitektur aplikasi. Di sini, tim keamanan akan membantu memeriksa desain dengan cara:\nThreat Modelling:\nMengidentifikasi potensi ancaman terhadap proses bisnis, seperti:\nApakah laporan kehadiran bisa dimanipulasi oleh pengguna? Apakah kehadiran pengguna satu bisa dilakukan oleh pengguna yang lain? Security Design Review:\nMelakukan pemeriksaan terhadap komponen desain teknis, seperti:\nArsitektur komunikasi frontend dan backend Mekanisme autentikasi dan sesi Desain API dan parameter sensitif Perlindungan data pada saat transit dan saat disimpan Dari hasil pemeriksaan ini, tim keamanan akan memberikan rekomendasi jika ditemukan potensi celah keamanan, sehingga desain bisa disempurnakan sebelum ke tahap implementasi.\n4. Implementasi Selanjutnya, tim pengembang akan mulai melakukan coding aplikasi sesuai desain dan spesifikasi yang telah disepakati.\nPada tahap ini, tim keamanan akan melakukan beberapa aktivitas, seperti:\nSecure Code Guideline:\nTim keamanan menyediakan panduan coding yang aman yang harus diikuti oleh pengembang. Ini mencakup hal-hal seperti:\nValidasi input pengguna Menghindari hardcode kredensial Menggunakan versi library yang aman Menangani error dan log dengan benar SAST (Static Application Security Testing):\nMenganalisis source code untuk mendeteksi kerentanan (seperti XSS, SQLi). Contoh tools yang digunakan:\nSemgrep SonarQube Fortify Checkmarx MobSF Secret Scanning:\nMendeteksi API key, password, atau token yang tidak sengaja ditulis ke dalam repositori. Contoh tools yang digunakan:\nGitGuardian TruffleHog Gitleaks SCA (Software Composition Analysis):\nMengecek library open source yang digunakan: apakah ada versi yang rentan atau tidak sesuai lisensi. Contoh tools yang digunakan:\nSynk OWASP Dependency Check Mend (WhiteSource) Container / IaC Security:\nJika menggunakan Docker/Terraform, dilakukan juga analisis terhadap konfigurasi dan image base. Contoh tools yang digunakan:\nTrivy Dockle Checkov tfsec Celah keamanan yang ditemukan dan telah divalidasi akan diperbaiki oleh tim pengembang.\n5. Pengujian Pada tahap ini tim keamanan akan melakukan pengujian setelah aplikasi lulus dari pengujian tim QA. Pengujian yang tim keamanan lakukan adalah:\nDAST (Dynamic Application Security Testing):\nMelakukan pengujian aplikasi secara dinamis untuk mendeteksi kerentanan (seperti XSS, SQLi). Contoh tools yang digunakan:\nMobSF Burp Suite OWASP ZAP Penetration Testing: Melakukan pengujian manual dan menyeluruh untuk menemukan serta memvalidasi celah keamanan yang tidak terdeteksi oleh DAST.\n6. Penerapan \u0026amp; Pemeliharaan Setelah lolos validasi internal, tahap berikutnya adalah merilis aplikasi ke lingkungan produksi. Tim keamanan akan tetap terlibat untuk memastikan aplikasi tetap aman selama operasional.\nAktivitasnya yang dilankukan antara lain:\nMonitoring Keamanan:\nMemantau kerentanan baru dari dependency atau komponen pihak ketiga menggunakan scanner otomatis dan advisory feeds.\nImplementasi WAF:\nMenggunakan WAF untuk mengidentifikasi serangan real-time terhadap aplikasi di lingkungan produksi.\nBug Bounty \u0026amp; VDP (Vulnerability Disclosure Program):\nMengelola laporan dari peneliti keamanan eksternal melalui program bug bounty publik atau privat serta jalur VDP resmi.\nPatch \u0026amp; Incident Response:\nMenangani insiden keamanan, merespons laporan, serta menerapkan patch dengan cepat jika ditemukan kerentanan.\nSecurity Regression Testing:\nPengujian keamanan ulang saat ada perubahan besar (fitur baru, refactor, dsb) untuk mencegah kebocoran keamanan lama muncul kembali.\nItulah seluruh tahapan dari Secure-SDLC. Dengan menerapkan konsep ini, kita memastikan bahwa aplikasi tidak hanya berfungsi dengan baik, tetapi juga memiliki keamanan yang memumpuni.\n","permalink":"https://blog.nairpaa.me/posts/apa-itu-ssdlc/","summary":"Mengenal SSDLC dengan bahasa santai dan mudah dimengerti.","title":"Apa itu SSDLC?"}]